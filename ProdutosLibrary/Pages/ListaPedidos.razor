@page "/pedidos"
@using System.Text.RegularExpressions
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IPedidosService pedidoService

<h3>Pedidos</h3>

<div class="row mb-3">
    <div class="col-md-4">
        <div class="input-group">
            <input class="form-control" placeholder="Pesquisar por Número ou Nome"
                   @bind-value="searchTerm"
                   @bind-value:event="oninput"
                   id="searchInput" />
            <button class="btn btn-secondary" @onclick="StartBarcodeScanner">
                <i class="fa fa-barcode"></i> Escanear
            </button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-4 mb-3">
        <input class="form-control" placeholder="Numero_Pedido" @bind="model!.Numero_Pedido" disabled />
    </div>
    <div class="col-md-4 mb-3">
        <input class="form-control" placeholder="Nome_Cliente" @bind="model!.Nome_Cliente" />
    </div>
    <div class="col-md-4 mb-3">
        <input class="form-control" placeholder="Data_Pedido" @bind="model!.Data_Pedido" />
    </div>
    <div class="col-md-4 mb-3">
        <button class="btn btn-primary" @onclick="AddPedido">Incluir Pedido</button>
    </div>
</div>

<div class="row mt-2">
    <div class="col-12">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Numero_Pedido</th>
                        <th>Nome_Cliente</th>
                        <th>Data_Pedido</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var pedido in PedidosFiltrados)
                    {
                        <tr>
                            <td>@pedido.Numero_Pedido</td>
                            <td>@pedido.Nome_Cliente</td>
                            <td>@pedido.Data_Pedido</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="() => ExcluirPedido(pedido)">Excluir</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Pedido>? pedidos = new();
    private Pedido? model = new();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        pedidos = await pedidoService.LoadPedidosAsync();
    }

    private async Task StartBarcodeScanner()
    {
        try
        {
            var result = await JSRuntime.InvokeAsync<string>("startBarcodeScanner");
            if (!string.IsNullOrEmpty(result))
            {
                searchTerm = result;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao escanear código de barras: {ex.Message}");
        }
    }

    private void AddPedido()
    {
        if (string.IsNullOrWhiteSpace(model!.Nome_Cliente) ||
            string.IsNullOrWhiteSpace(model.Data_Pedido))
            return;

        model.Numero_Pedido = GerarNumeroPedido();
        pedidos!.Add(model);
        model = new();
    }

    private void ExcluirPedido(Pedido pedido)
    {
        pedidos!.Remove(pedido);
    }

    private string GerarNumeroPedido()
    {
        var random = new Random();
        return $"PED-{random.Next(10000, 99999)}";
    }

    private IEnumerable<Pedido> PedidosFiltrados =>
        pedidos!.Where(p =>
            string.IsNullOrEmpty(searchTerm) ||
            p.Numero_Pedido!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
            p.Nome_Cliente!.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
}